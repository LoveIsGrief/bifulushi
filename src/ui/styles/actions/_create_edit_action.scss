@import "../variables";

.container-action.action-create-edit {

  %selector {
    display: flex;
    position: relative;
    flex-wrap: wrap;
    justify-content: space-between;

    border: 1px solid $button-color;
    margin-top: 1em;
    padding: 3px;

    &::before {
      position: absolute;
      content: 'Header';
      font-size: $font-size + 3px;
      top: -9px;
      left: 9px;
      text-emphasis: #0a0a0a;
      background: linear-gradient($gradient-top, $gradient-bottom);
    }

    & > * {
      margin-left: 0.5em;
      margin-right: 0.5em;
      margin-top: 0.5em;
    }

    .item {
      &:hover {
        box-shadow: 0 0 0 1px #0a84ff inset, 0 0 0 1px #0a84ff, 0 0 0 4px rgba(10, 132, 255, 0.3);
      }

      &.selected {
        box-shadow: -5px 5px 7px #131313;
        border-style: ridge;
        border-width: 4px;
        border-color: #000000a6;
      }
    }
  }


  .color-selector {
    @extend %selector;

    &::before {
      content: 'Color';
    }

    button {
      position: relative;
      min-width: 25%;
      min-height: 20px;
      border-radius: 1rem;
      border-color: transparent;

    }
  }

  .icon-selector {
    @extend %selector;

    &::before {
      content: 'Icon';
    }

    /**
      Provides the background for icon so that bright colors can still be seen.
     */
    .item {
      --item-size: 38px;
      position: relative;
      min-height: var(--item-size);
      min-width: var(--item-size);
      border: transparent;
      border-radius: 5px;
      background-color: #f5f5ec;

      /**
      * Commented until data types in attributes are support
      * For now a per color rule is generated in JS
      */
      //&[data-color] {
      //  --color: attr(data-color color, red);
      //}

      .icon {
        $icon-inset: 5px;

        position: absolute;
        top: $icon-inset;
        bottom: $icon-inset;
        left: $icon-inset;
        right: $icon-inset;

        background-color: var(--icon-color);
        mask-size: contain;

        // .item should get events in order to process them
        pointer-events: none;
      }
    }
  }

  .top {

    .error {
      color: red;
    }
  }
}
